import React, { useEffect, useRef } from 'react'
import styled from 'styled-components'

import { TimeBlock } from '../../store/facilityBooking/types'
import { scrollToView } from './CurrentTimeLine'

import { StyledViewBooking } from './BlockStyles.styled'

const StyledBookingInfo = styled.span`
  width: 100%;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
`

type Props = {
  entry: TimeBlock
  scrollTo?: boolean
  openViewBookingModal: () => void
  setViewBookingEntryId: () => void
}

/**
 *
 * The `ViewBlock` is generated by the `ViewScheduleBlock`. Each block represents an hour of the day. \
 * If there is a booking made during that hour, it displays its details. Otherwise, it is greyed out.
 *
 * @param entry (type `number`)
 * @param scrollTo (type `boolean`, optional)
 * @param openViewBookingModal: (type `function`)
 * @param setViewBookingEntryId (type `function`)
 *
 * @returns An event block that contains the component displaying the: \
 *          1: Facility \
 *          2: CCA that made the booking \
 *          3: Event name \
 *          4: Date/Time of booking
 *
 * @example
 * ```
 * // For each of the 24 `timeBlock`s in the `timeBlocks`  array, a `ViewBlock` element is generated:
 * <ViewBlock
 *  key={index}
 *  entry={entry}
 *  // if day selected is not current, scroll to defaultTimePosition
 *  scrollTo={!isToday(timeBlocks[0].timestamp) && index === defaultTimePosition}
 *  openViewBookingModal={() => setIsViewBookingModalOpen(true)}
 *  setViewBookingEntryId={() => fetchBooking(entry.id)}
 * />
 * ```
 *
 * @remarks
 * <any remarks on this component type in here>
 *
 */

const ViewBlock = (props: Props) => {
  const ref = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (props.scrollTo) {
      scrollToView(ref)
    }
  }, [ref.current])

  return props.entry.booking ? (
    <StyledViewBooking
      ref={ref}
      isOccupied
      blockId={props.entry.id}
      onClick={() => {
        props.openViewBookingModal()
        props.setViewBookingEntryId()
      }}
    >
      <StyledBookingInfo>
        {props.entry.ccaName} - {props.entry.eventName}
      </StyledBookingInfo>
    </StyledViewBooking>
  ) : (
    <StyledViewBooking ref={ref} isOccupied={false} blockId={props.entry.id} />
  )
}

export default ViewBlock
